import asyncio
import os
import logging
import random

from aiogram.utils import executor
from dotenv import load_dotenv
import httpx
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

import keyboards as kb
from db import (
    remove_watched_series, clear_watched_series, add_wishlist_series,
    get_wishlist_series, remove_wishlist_series, move_to_watched,
    clear_wishlist_series, add_watched_series, series_exists, get_watched_series
)
from utils import get_series_by_genre
from rec import recommend, format_show_info
from search import get_series_by_title, clean_html, translate_text


# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
load_dotenv()
logging.basicConfig(level=logging.INFO)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = Bot(os.getenv('TOKEN'))
dp = Dispatcher(bot, storage=MemoryStorage())

# –ü–µ—Ä–µ–ª—ñ–∫ –∂–∞–Ω—Ä—ñ–≤
GENRES = ['Action', 'Adventure', 'Anime', 'Comedy', 'Crime',
          'Drama', 'Espionage', 'Family', 'Fantasy', 'History', 'Horror', 'Legal',
          'Medical', 'Music', 'Mystery', 'Romance', 'Science-Fiction', 'Sports',
          'Supernatural', 'Thriller', 'War', 'Western']

# –°—Ç–∞–Ω–∏ –¥–ª—è FSM
class SearchState(StatesGroup):
    waiting_for_title = State()  # –ß–µ–∫–∞—î –Ω–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–∞–∑–≤–∏ —Å–µ—Ä—ñ–∞–ª—É –ø—ñ–¥ —á–∞—Å –ø–æ—à—É–∫—É

class UserState(StatesGroup):
    waiting_for_count = State()  # –ß–µ–∫–∞—î –Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–µ—Ä—ñ–∞–ª—ñ–≤

class WatchState(StatesGroup):
    waiting_for_series_name = State()  # –ß–µ–∫–∞—î –Ω–∞ –Ω–∞–∑–≤—É —Å–µ—Ä—ñ–∞–ª—É –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É

class RemoveState(StatesGroup):
    waiting_for_series_name = State()  # –ß–µ–∫–∞—î –Ω–∞ –Ω–∞–∑–≤—É —Å–µ—Ä—ñ–∞–ª—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è

class Form(StatesGroup):
    waiting_for_series_name = State()  # –ß–µ–∫–∞—î –Ω–∞ –Ω–∞–∑–≤—É —Å–µ—Ä—ñ–∞–ª—É

class WishlistForm(StatesGroup):
    waiting_for_series_name = State()  # –ß–µ–∫–∞—î –Ω–∞ –Ω–∞–∑–≤—É —Å–µ—Ä—ñ–∞–ª—É –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤ –±–∞–∂–∞–Ω—ñ

class WishlistRemove(StatesGroup):
    waiting_for_series_name = State()  # –ß–µ–∫–∞—î –Ω–∞ –Ω–∞–∑–≤—É —Å–µ—Ä—ñ–∞–ª—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑ –±–∞–∂–∞–Ω–∏—Ö

class MoveToWatchedState(StatesGroup):
    waiting_for_series_name = State()  # –ß–µ–∫–∞—î –Ω–∞ –Ω–∞–∑–≤—É —Å–µ—Ä—ñ–∞–ª—É –¥–ª—è –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –¥–æ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏—Ö

class ClearWishlistState(StatesGroup):
    waiting_for_confirmation = State()  # –ß–µ–∫–∞—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –±–∞–∂–∞–Ω–∏—Ö

class ClearWatchedState(StatesGroup):
    waiting_for_confirmation = State()  # –°—Ç–∞–Ω, –∫–æ–ª–∏ —á–µ–∫–∞—î–º–æ –Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

# –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è —Ç–∞ —Å—Ç–∞—Ä—Ç–æ–≤–µ –º–µ–Ω—é
#–ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è —Ç–∞ —Å—Ç–∞—Ä—Ç–æ–≤–µ –º–µ–Ω—é
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start.
    –í—ñ—Ç–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –Ω–∞–¥–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –¥–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏.
    """

    await message.answer(f"–ü—Ä–∏–≤—ñ—Ç, {message.from_user.first_name}! üëã", reply_markup=kb.main)


# –î–æ–ø–æ–º–æ–≥–∞ - –¥–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏
@dp.message_handler(text='Help')
async def cmd_help(message: types.Message):
    help_text = (
        "üìú *–û–ø–∏—Å –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π:*\n\n"
        "Start - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
        "Help - –¥–æ–ø–æ–º–æ–≥–∞\n"
        "About - —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç–∞\n"
        "Recommendations & Search - —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –≤—ñ–¥ –±–æ—Ç–∞ —Ç–∞ –ø–æ—à—É–∫ –∑–∞ –Ω–∞–∑–≤–æ—é\n"
        "Watched List - –≤–∑–∞—î–º–æ–¥—ñ—è –∑—ñ —Å–ø–∏—Å–∫–æ–º –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏—Ö —Å–µ—Ä—ñ–∞–ª—ñ–≤\n"
        "Watch Later - –≤–∑–∞—î–º–æ–¥—ñ—è –∑—ñ —Å–ø–∏—Å–∫–æ–º –±–∞–∂–∞–Ω–æ–≥–æ –¥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É"
    )
    await message.answer(help_text, parse_mode='Markdown')

# –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç–∞
@dp.message_handler(text='About')
async def cmd_about(message: types.Message):
    about_text = (
        "SeriesBot - –≤–∞—à –æ—Å–æ–±–∏—Å—Ç–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ —É —Å–≤—ñ—Ç—ñ —Ç–µ–ª–µ—Å–µ—Ä—ñ–∞–ª—ñ–≤! üé¨\n\n"
        "–¶–µ–π –±–æ—Ç –¥–æ–ø–æ–º–æ–∂–µ –≤–∞–º –∑–Ω–∞–π—Ç–∏ —Ü—ñ–∫–∞–≤—ñ —Å–µ—Ä—ñ–∞–ª–∏, –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤–∞—à–∏—Ö —É–ø–æ–¥–æ–±–∞–Ω—å, "
        "—Ç–∞ —É–ø—Ä–∞–≤–ª—è—Ç–∏ —Å–ø–∏—Å–∫–∞–º–∏ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏—Ö —ñ –±–∞–∂–∞–Ω–∏—Ö —Å–µ—Ä—ñ–∞–ª—ñ–≤.\n\n"
        "–í–∏ –º–æ–∂–µ—Ç–µ —à—É–∫–∞—Ç–∏ —Å–µ—Ä—ñ–∞–ª–∏ –∑–∞ –Ω–∞–∑–≤–æ—é, –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –ø—Ä–æ –Ω–∏—Ö –±—ñ–ª—å—à–µ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –¥–µ—Ç–∞–ª—å–Ω–∏—Ö –≤—ñ–¥–æ–º–æ—Å—Ç–µ–π, "
        "–æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –∞–±–æ –æ–±–∏—Ä–∞—Ç–∏ —Å–µ—Ä—ñ–∞–ª–∏ –∑–∞ –∂–∞–Ω—Ä–∞–º–∏, —Ç–∞–∫–∏–º–∏ —è–∫ –∫–æ–º–µ–¥—ñ—ó, –¥—Ä–∞–º–∏, —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞ —Ç–∞ —ñ–Ω—à—ñ.\n\n"
        "SeriesBot –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∑ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª, —â–æ–± –Ω–∞–¥–∞—Ç–∏ –≤–∞–º –Ω–∞–π–∞–∫—Ç—É–∞–ª—å–Ω—ñ—à—É —Ç–∞ —Ç–æ—á–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ–∂–µ–Ω —Å–µ—Ä—ñ–∞–ª."
    )
    await message.answer(about_text)

# –ú–µ–Ω—é –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π —Ç–∞ –ø–æ—à—É–∫—É
@dp.message_handler(text='Recommendations & Search')
async def cmd_recommendation(message: types.Message):
    await message.answer('–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:', reply_markup=kb.recommendation_list)

# –ú–µ–Ω—é –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Å–ø–∏—Å–∫—É –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏—Ö —Å–µ—Ä—ñ–∞–ª—ñ–≤
@dp.message_handler(text='Watched List')
async def cmd_watched(message: types.Message):
    await message.answer('–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑—ñ —Å–ø–∏—Å–∫–æ–º –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏—Ö —Å–µ—Ä—ñ–∞–ª—ñ–≤:', reply_markup=kb.watched_commands_list)

# –ú–µ–Ω—é –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Å–ø–∏—Å–∫—É –±–∞–∂–∞–Ω–∏—Ö —Å–µ—Ä—ñ–∞–ª—ñ–≤
@dp.message_handler(text='Watch Later')
async def cmd_wishlist(message: types.Message):
    await message.answer('–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –¥–ª—è —Å–ø–∏—Å–∫—É –±–∞–∂–∞–Ω–∏—Ö –¥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É —Å–µ—Ä—ñ–∞–ª—ñ–≤:', reply_markup=kb.wishlist_commands_list)

# –û–±—Ä–æ–±–∫–∞ –Ω–µ–≤—ñ–¥–æ–º–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
@dp.message_handler()
async def answer(message: types.Message):
    await message.reply('–í–∏–±–∞—á—Ç–µ, —è –Ω–µ —Ä–æ–∑—É–º—ñ—é –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Ç—É.')

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
def cancel_keyboard(callback_data='cancel_popular'):
    return InlineKeyboardMarkup().add(InlineKeyboardButton("–°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data=callback_data))

#–û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ "recommend"
@dp.callback_query_handler(lambda c: c.data == 'recommend')
async def handle_recommend(callback_query: types.CallbackQuery):
    await recommend(callback_query.message)  # –ü–µ—Ä–µ–¥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ callback_query

    # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ Inline –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
    await bot.edit_message_reply_markup(chat_id=callback_query.from_user.id,
                                        message_id=callback_query.message.message_id)
    # –ó–∞—Ç—Ä–∏–º–∫–∞ –≤ 5 —Å–µ–∫—É–Ω–¥–∏, —â–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ–±–∞—á–∏–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è–º–∏
    await asyncio.sleep(5)
    # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é
    await bot.delete_message(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id)
    await callback_query.answer()

# –û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ "popular"
@dp.callback_query_handler(lambda c: c.data == 'popular')
async def handle_popular(callback_query: types.CallbackQuery):
    await bot.send_message(
        callback_query.from_user.id,
        "–°–∫—ñ–ª—å–∫–∏ —Å–µ—Ä—ñ–∞–ª—ñ–≤ –≤–∏ —Ö–æ—á–µ—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏? (–≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ).\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–°–∫–∞—Å—É–≤–∞—Ç–∏', —â–æ–± –≤–∏–π—Ç–∏.",
        reply_markup=cancel_keyboard()
    )

    # –ü–µ—Ä–µ–º—ñ—â–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
    await UserState.waiting_for_count.set()
    # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ Inline –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É, –≤–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é —Ç–∞ —Å—Ç–∞–≤–∏–º–æ –∑–∞—Ç—Ä–∏–º–∫—É
    await bot.edit_message_reply_markup(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id)
    await asyncio.sleep(4)
    await bot.delete_message(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id)
    # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ callback_query, —â–æ–± –ø—Ä–∏–±—Ä–∞—Ç–∏ —ñ–Ω–¥–∏–∫–∞—Ü—ñ—é –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏
    await callback_query.answer()

# –û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ '–°–∫–∞—Å—É–≤–∞—Ç–∏' –¥–ª—è –≤–∏—Ö–æ–¥—É –∑ –≤–≤–µ–¥–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Å–µ—Ä—ñ–∞–ª—ñ–≤
@dp.callback_query_handler(lambda c: c.data == 'cancel_popular', state=UserState.waiting_for_count)
async def cancel_popular(callback_query: types.CallbackQuery, state: FSMContext):
    # –ó–∞–≤–µ—Ä—à—É—î–º–æ —Å—Ç–∞–Ω, —â–æ–± –≤–∏–π—Ç–∏ –∑ –ø—Ä–æ—Ü–µ—Å—É –≤–≤–µ–¥–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Å–µ—Ä—ñ–∞–ª—ñ–≤
    await state.finish()

    await callback_query.message.answer("–ü—Ä–æ—Ü–µ—Å —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –í–∏ –º–æ–∂–µ—Ç–µ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑,"
                                        " –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –∫–Ω–æ–ø–∫—É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π.")
    await callback_query.answer()


# –û–±—Ä–æ–±–Ω–∏–∫ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ—à—É–∫—É
@dp.callback_query_handler(lambda c: c.data == 'search')
async def handle_search(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await SearchState.waiting_for_title.set()  # –£–≤—ñ–π—Ç–∏ –≤ —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è

    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é
    await callback_query.message.answer(
        "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Å–µ—Ä—ñ–∞–ª—É –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–°–∫–∞—Å—É–≤–∞—Ç–∏', —â–æ–± –≤–∏–π—Ç–∏.",
        reply_markup=cancel_keyboard()
    )

    # –û—á–∏—â—É—î–º–æ —Å—Ç–∞—Ä—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
    await bot.edit_message_reply_markup(
        chat_id=callback_query.from_user.id,
        message_id=callback_query.message.message_id
    )

    # –ü–ª–∞–≤–Ω–∞ –ø–∞—É–∑–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await asyncio.sleep(5)
    await bot.delete_message(
        chat_id=callback_query.from_user.id,
        message_id=callback_query.message.message_id
    )

# –û–±—Ä–æ–±–Ω–∏–∫ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –ø–æ—à—É–∫—É
@dp.callback_query_handler(lambda c: c.data == 'cancel_popular', state=SearchState.waiting_for_title)
async def cancel_search(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ '–°–∫–∞—Å—É–≤–∞—Ç–∏' –¥–ª—è –≤–∏—Ö–æ–¥—É –∑ –ø–æ—à—É–∫—É."""
    await state.finish()  # –ó–∞–≤–µ—Ä—à—É—î–º–æ —Å—Ç–∞–Ω

    # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É —Ç–∞ –æ—á–∏—â—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ü—ñ—é –∫–Ω–æ–ø–∫–∏
    await callback_query.message.answer("–ü–æ—à—É–∫ —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –í–∏ –º–æ–∂–µ—Ç–µ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –∫–Ω–æ–ø–∫—É –ø–æ—à—É–∫—É.")
    await callback_query.answer()



@dp.callback_query_handler(lambda c: c.data == 'add_watched')
async def handle_add_watched(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()

    # –ó–∞–¥–∞—î–º–æ —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–≤–µ–¥–µ–Ω–Ω—è —Å–µ—Ä—ñ–∞–ª—É
    await WatchState.waiting_for_series_name.set()
    cancel_kb = cancel_keyboard('cancel_add_watched')

    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é
    await callback_query.message.answer(
        "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Å–µ—Ä—ñ–∞–ª—É, —â–æ–± –¥–æ–¥–∞—Ç–∏ –π–æ–≥–æ –¥–æ —Å–ø–∏—Å–∫—É –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏—Ö. "
        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–°–∫–∞—Å—É–≤–∞—Ç–∏', —â–æ–± –≤–∏–π—Ç–∏.",
        reply_markup=cancel_kb
    )

    # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ Inline –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É —É –ø–æ—á–∞—Ç–∫–æ–≤–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ
    await bot.edit_message_reply_markup(chat_id=callback_query.from_user.id,
                                        message_id=callback_query.message.message_id)


@dp.callback_query_handler(lambda c: c.data == 'cancel_add_watched', state=WatchState.waiting_for_series_name)
async def cancel_add_watched(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await callback_query.message.answer("–î–æ–¥–∞–≤–∞–Ω–Ω—è —Å–µ—Ä—ñ–∞–ª—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –í–∏ –º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏ —Å–ø—Ä–æ–±—É –≤ –±—É–¥—å-—è–∫–∏–π —á–∞—Å.")
    await callback_query.answer()


# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "remove_watched"
@dp.callback_query_handler(lambda c: c.data == 'remove_watched')
async def handle_remove_watched(callback_query: types.CallbackQuery):
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–æ—é "–°–∫–∞—Å—É–≤–∞—Ç–∏"
    cancel_markup = cancel_keyboard('cancel_remove_watched')

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—î—é —Ç–∞ –∫–Ω–æ–ø–∫–æ—é "–°–∫–∞—Å—É–≤–∞—Ç–∏"
    await callback_query.message.answer(
        "–í–∏ –æ–±—Ä–∞–ª–∏ –≤–∏–¥–∞–ª–∏—Ç–∏ —Å–µ—Ä—ñ–∞–ª –∑—ñ —Å–ø–∏—Å–∫—É –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–æ–≥–æ.\n"
        "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Å–µ—Ä—ñ–∞–ª—É, —è–∫–∏–π –±–∞–∂–∞—î—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏, –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–°–∫–∞—Å—É–≤–∞—Ç–∏', —â–æ–± –≤–∏–π—Ç–∏.",
        reply_markup=cancel_markup
    )

    # –ó–∞–¥–∞—î–º–æ —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–∞–∑–≤–∏ —Å–µ—Ä—ñ–∞–ª—É
    await RemoveState.waiting_for_series_name.set()

    # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ Inline –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
    await bot.edit_message_reply_markup(
        chat_id=callback_query.from_user.id,
        message_id=callback_query.message.message_id
    )

    await callback_query.answer()

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–∫–∞—Å—É–≤–∞—Ç–∏" –ø—ñ–¥ —á–∞—Å –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Å–µ—Ä—ñ–∞–ª—É
@dp.callback_query_handler(lambda c: c.data == 'cancel_remove_watched', state=RemoveState.waiting_for_series_name)
async def cancel_remove_watched(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await callback_query.message.answer("–í–∏–¥–∞–ª–µ–Ω–Ω—è —Å–µ—Ä—ñ–∞–ª—É –∑—ñ —Å–ø–∏—Å–∫—É –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–æ–≥–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –í–∏ –º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏ —Å–ø—Ä–æ–±—É –≤ –±—É–¥—å-—è–∫–∏–π —á–∞—Å.")
    await callback_query.answer()


# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "show_watched"
@dp.callback_query_handler(lambda c: c.data == 'show_watched')
async def handle_show_watched(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç—ñ —Å–µ—Ä—ñ–∞–ª–∏ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    watched_series = await get_watched_series(user_id)

    if watched_series:
        # –§–æ—Ä–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ —Å–µ—Ä—ñ–∞–ª—ñ–≤
        formatted_list = "\n".join([f"‚óã {series}" for series in watched_series])
        response_text = f"üìú **–í–∞—à—ñ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç—ñ —Å–µ—Ä—ñ–∞–ª–∏:**\n\n{formatted_list}"
    else:
        response_text = "üòî –í–∏ —â–µ –Ω–µ –¥–æ–¥–∞–ª–∏ –∂–æ–¥–Ω–æ–≥–æ —Å–µ—Ä—ñ–∞–ª—É –¥–æ —Å–ø–∏—Å–∫—É –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–æ–≥–æ. –ü–æ—á–Ω—ñ—Ç—å –∑ —á–æ–≥–æ—Å—å —Ü—ñ–∫–∞–≤–æ–≥–æ!" # –Ø–∫—â–æ —Å–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    await callback_query.message.answer(response_text, parse_mode="Markdown")

    # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ Inline –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
    await bot.edit_message_reply_markup(
        chat_id=callback_query.from_user.id,
        message_id=callback_query.message.message_id,
    )

    # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é —á–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫–∏–π —á–∞—Å
    await asyncio.sleep(0.5)
    await bot.delete_message(
        chat_id=callback_query.from_user.id,
        message_id=callback_query.message.message_id,
    )

    await callback_query.answer()

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "clear_watched"
@dp.callback_query_handler(lambda c: c.data == 'clear_watched')
async def handle_clear_watched(callback_query: types.CallbackQuery):
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ —Å—Ç–∞–Ω—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    await ClearWatchedState.waiting_for_confirmation.set()
    await bot.send_message(
        chat_id=callback_query.from_user.id,
        text="–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –æ—á–∏—Å—Ç–∏—Ç–∏ –≤–∞—à —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏—Ö —Å–µ—Ä—ñ–∞–ª—ñ–≤? –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ '–¢–∞–∫' –∞–±–æ '–ù—ñ'."
    )

# –û–±—Ä–æ–±–Ω–∏–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ—á–∏—â–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏—Ö
@dp.message_handler(state=ClearWatchedState.waiting_for_confirmation)
async def process_clear_watched_confirmation(message: types.Message, state: FSMContext):
    user_response = message.text.lower()

    if user_response == '—Ç–∞–∫':
        # –û—á–∏—â–∞—î–º–æ —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏—Ö —Å–µ—Ä—ñ–∞–ª—ñ–≤ —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
        user_id = message.from_user.id
        await clear_watched_series(user_id)

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è–º
        await message.answer(
            text="üóëÔ∏è –í–∞—à —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏—Ö —Å–µ—Ä—ñ–∞–ª—ñ–≤ —É—Å–ø—ñ—à–Ω–æ –æ—á–∏—â–µ–Ω–æ.",
            parse_mode="Markdown"
        )
    elif user_response == '–Ω—ñ':
        # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤—ñ–¥–ø–æ–≤—ñ–≤ '–Ω—ñ', –ø—Ä–æ—Å—Ç–æ –∑–∞–≤–µ—Ä—à—É—î–º–æ —Å—Ç–∞–Ω
        await message.answer(
            text="–û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫—É –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏—Ö —Å–µ—Ä—ñ–∞–ª—ñ–≤ –±—É–ª–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–∞."
        )
    else:
        # –Ø–∫—â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–µ —î '—Ç–∞–∫' —á–∏ '–Ω—ñ', –∑–∞–ø–∏—Ç–∞—î–º–æ –∑–Ω–æ–≤—É
        await message.answer(
            text="–ë—É–¥—å –ª–∞—Å–∫–∞, –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ '–¢–∞–∫' –∞–±–æ '–ù—ñ'."
        )

    # –ó–∞–≤–µ—Ä—à—É—î–º–æ —Å—Ç–∞–Ω
    await state.finish()

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ " handle_add_wishlist"
@dp.callback_query_handler(lambda c: c.data == 'add_wishlist', state="*")
async def handle_add_wishlist(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    await bot.send_message(
        chat_id=user_id,
        text="–û–±—Ä–∞–Ω–æ –¥–æ–¥–∞—Ç–∏ —Å–µ—Ä—ñ–∞–ª –¥–æ —Å–ø–∏—Å–∫—É –±–∞–∂–∞–Ω–æ–≥–æ. –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Å–µ—Ä—ñ–∞–ª—É:"
    )

    await Form.waiting_for_series_name.set()

    # –î–æ–¥–∞—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–æ—é "–°–∫–∞—Å—É–≤–∞—Ç–∏"
    await bot.send_message(
        chat_id=user_id,
        text="–©–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–°–∫–∞—Å—É–≤–∞—Ç–∏'.",
        reply_markup=cancel_keyboard('cancel_add_wishlist')
    )

    # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ Inline –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫–µ —ñ–Ω—ñ—Ü—ñ—é–≤–∞–ª–æ –≤–∏–∫–ª–∏–∫
    await bot.edit_message_reply_markup(
        chat_id=user_id,
        message_id=callback_query.message.message_id
    )

    # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é —á–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫–∏–π —á–∞—Å
    await asyncio.sleep(0.5)
    await bot.delete_message(chat_id=user_id, message_id=callback_query.message.message_id)

    await callback_query.answer()

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–∫–∞—Å—É–≤–∞—Ç–∏" –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è
@dp.callback_query_handler(lambda c: c.data == 'cancel_add_wishlist', state=Form.waiting_for_series_name)
async def cancel_add_wishlist(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await callback_query.message.answer(
        "–î–æ–¥–∞–≤–∞–Ω–Ω—è —Å–µ—Ä—ñ–∞–ª—É –¥–æ —Å–ø–∏—Å–∫—É –±–∞–∂–∞–Ω–æ–≥–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –í–∏ –º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏ —Å–ø—Ä–æ–±—É –≤ –±—É–¥—å-—è–∫–∏–π —á–∞—Å."
    )
    await callback_query.answer()

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "handle_show_wishlist"
@dp.callback_query_handler(lambda c: c.data == 'show_wishlist')
async def handle_show_wishlist(callback_query: types.CallbackQuery):
    await bot.send_message(chat_id=callback_query.from_user.id, text='–û–±—Ä–∞–Ω–æ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –±–∞–∂–∞–Ω–µ')

    # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –±–∞–∂–∞–Ω–∏—Ö —Å–µ—Ä—ñ–∞–ª—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user_id = callback_query.from_user.id
    wishlist_series = await get_wishlist_series(user_id)

    # –í–∏–¥–∞–ª—è—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏ –∑—ñ —Å–ø–∏—Å–∫—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é set()
    wishlist_series = list(set(wishlist_series))

    # –Ø–∫—â–æ —î —Å–µ—Ä—ñ–∞–ª–∏ —É —Å–ø–∏—Å–∫—É –±–∞–∂–∞–Ω–∏—Ö
    if wishlist_series:
        formatted_list = "\n".join([f"‚óã {series}" for series in wishlist_series])
        await bot.send_message(chat_id=callback_query.from_user.id, text=f"–°–µ—Ä—ñ–∞–ª–∏ –≤ —Å–ø–∏—Å–∫—É –≤–ø–æ–¥–æ–±–∞–Ω—å:\n{formatted_list}")
    else:
        await bot.send_message(chat_id=callback_query.from_user.id, text="üòî –£ –≤–∞—Å –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ–≥–æ —Å–µ—Ä—ñ–∞–ª—É –≤ —Å–ø–∏—Å–∫—É –≤–ø–æ–¥–æ–±–∞–Ω—å.")

    # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ Inline –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
    await bot.edit_message_reply_markup(chat_id=callback_query.from_user.id,
                                        message_id=callback_query.message.message_id)

    await bot.delete_message(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id)
    await callback_query.answer()


# –ö–Ω–æ–ø–∫–∞ "–°–∫–∞—Å—É–≤–∞—Ç–∏"
cancel_button = InlineKeyboardMarkup().add(
    InlineKeyboardButton("–°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_remove_wishlist")
)

@dp.callback_query_handler(lambda c: c.data == 'remove_wishlist', state="*")
async def handle_remove_wishlist(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id

    await WishlistRemove.waiting_for_series_name.set()
    await bot.send_message(
        chat_id=user_id,
        text="–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Å–µ—Ä—ñ–∞–ª—É, —è–∫–∏–π –≤–∏ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –∑—ñ —Å–ø–∏—Å–∫—É –±–∞–∂–∞–Ω–∏—Ö:",
        reply_markup=cancel_button
    )

    # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ Inline –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
    try:
        await bot.edit_message_reply_markup(chat_id=user_id, message_id=callback_query.message.message_id)
        await bot.delete_message(chat_id=user_id, message_id=callback_query.message.message_id)
    except Exception:
        pass  # –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏, —è–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∂–µ –≤–∏–¥–∞–ª–µ–Ω–æ

    await callback_query.answer()


# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–∫–∞—Å—É–≤–∞—Ç–∏"
@dp.callback_query_handler(lambda c: c.data == 'cancel_remove_wishlist', state=WishlistRemove.waiting_for_series_name)
async def cancel_remove_wishlist(callback_query: types.CallbackQuery, state: FSMContext):

    # –ó–∞–≤–µ—Ä—à—É—î–º–æ —Å—Ç–∞–Ω
    await state.finish()
    await bot.send_message(
        chat_id=callback_query.from_user.id,
        text="–í–∏–¥–∞–ª–µ–Ω–Ω—è —Å–µ—Ä—ñ–∞–ª—É –∑—ñ —Å–ø–∏—Å–∫—É –±–∞–∂–∞–Ω–∏—Ö —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –í–∏ –º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏ —Å–ø—Ä–æ–±—É –≤ –±—É–¥—å-—è–∫–∏–π —á–∞—Å."
    )
    await callback_query.answer()


# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ–º—ñ—Å—Ç–∏—Ç–∏ –¥–æ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏—Ö"
@dp.callback_query_handler(lambda c: c.data == 'move_to_watched', state="*")
async def handle_move_to_watched(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    await MoveToWatchedState.waiting_for_series_name.set()

    cancel_button = InlineKeyboardMarkup().add(
        InlineKeyboardButton("–°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data='cancel_move_to_watched')
    )

    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–æ—é —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
    print("cancel_button callback_data:", cancel_button.inline_keyboard[0][0].callback_data)  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–Ω–∞—á–µ–Ω–Ω—è callback_data
    await bot.send_message(
        chat_id=user_id,
        text="–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Å–µ—Ä—ñ–∞–ª—É, —è–∫–∏–π –≤–∏ —Ö–æ—á–µ—Ç–µ –ø–µ—Ä–µ–º—ñ—Å—Ç–∏—Ç–∏ –¥–æ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–æ–≥–æ:",
        reply_markup=cancel_button  # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–°–∫–∞—Å—É–≤–∞—Ç–∏"
    )

    # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ Inline –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –≤ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ
    try:
        await bot.edit_message_reply_markup(chat_id=user_id, message_id=callback_query.message.message_id)
        await bot.delete_message(chat_id=user_id, message_id=callback_query.message.message_id)
    except Exception as e:
        print(f"Error while editing/deleting message: {e}")
    await callback_query.answer()

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–∫–∞—Å—É–≤–∞—Ç–∏" –¥–ª—è –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è —Å–µ—Ä—ñ–∞–ª—É –¥–æ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏—Ö
@dp.callback_query_handler(lambda c: c.data == 'cancel_move_to_watched', state=MoveToWatchedState.waiting_for_series_name)
async def cancel_move_to_watched(callback_query: types.CallbackQuery, state: FSMContext):

    await state.finish()
    await bot.send_message(
        chat_id=callback_query.from_user.id,
        text="–ü–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è —Å–µ—Ä—ñ–∞–ª—É –¥–æ —Å–ø–∏—Å–∫—É –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏—Ö —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –í–∏ –º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏ —Å–ø—Ä–æ–±—É –≤ –±—É–¥—å-—è–∫–∏–π —á–∞—Å."
    )
    await callback_query.answer()

# –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –±–∞–∂–∞–Ω–∏—Ö
@dp.callback_query_handler(lambda c: c.data == 'clear_wishlist', state="*")
async def handle_clear_wishlist(callback_query: types.CallbackQuery):
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ —Å—Ç–∞–Ω—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    await ClearWishlistState.waiting_for_confirmation.set()
    await bot.send_message(
        chat_id=callback_query.from_user.id,
        text="–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –æ—á–∏—Å—Ç–∏—Ç–∏ –≤–∞—à —Å–ø–∏—Å–æ–∫ –±–∞–∂–∞–Ω–∏—Ö —Å–µ—Ä—ñ–∞–ª—ñ–≤? –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ '–¢–∞–∫' –∞–±–æ '–ù—ñ'."
    )


#–æ–±—Ä–æ–±–Ω–∏–∫ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –¥–ª—è –≤–∏–±–æ—Ä—É –∂–∞–Ω—Ä—É (—á–∞—Å—Ç–∏–Ω–∞ –ª–æ–≥—ñ–∫–∏ recomend)
@dp.callback_query_handler(lambda c: c.data in GENRES)  # –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –∂–∞–Ω—Ä—É
async def handle_genre_selection(callback_query: types.CallbackQuery):
    """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä –∂–∞–Ω—Ä—É —Ç–∞ –Ω–∞–¥–∞—î —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó."""
    try:
        genre = callback_query.data
        series = await get_series_by_genre(genre)  # –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ –≤–∞—à—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–µ—Ä—ñ–∞–ª—ñ–≤

        if not series:
            await callback_query.message.edit_text("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Å–µ—Ä—ñ–∞–ª—ñ–≤ –¥–ª—è —Ü—å–æ–≥–æ –∂–∞–Ω—Ä—É.")
            return

        random_series = random.sample(series, min(len(series), 3))  # –í–∏–±–∏—Ä–∞—î–º–æ 3 –≤–∏–ø–∞–¥–∫–æ–≤—ñ —Å–µ—Ä—ñ–∞–ª–∏
        recommendations = "\n\n".join([format_show_info(show) for show in random_series])

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
        await callback_query.message.edit_text(f"–û—Å—å –∫—ñ–ª—å–∫–∞ —Å–µ—Ä—ñ–∞–ª—ñ–≤ —É –∂–∞–Ω—Ä—ñ {genre}:\n{recommendations}")
    except Exception as e:
        await callback_query.message.edit_text(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∫–Ω–æ–ø–∫–∏: {str(e)}")


@dp.message_handler(lambda message: not message.text.isdigit(), state=UserState.waiting_for_count)
async def handle_invalid_count(message: types.Message):
    """–û–±—Ä–æ–±–ª—è—î –≤–∏–ø–∞–¥–∫–∏, –∫–æ–ª–∏ –≤–≤–µ–¥–µ–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–µ —î —á–∏—Å–ª–æ–º."""
    await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ, —è–∫–µ –≤–∫–∞–∑—É—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–µ—Ä—ñ–∞–ª—ñ–≤, —è–∫—ñ –≤–∏ —Ö–æ—á–µ—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏.")

@dp.message_handler(lambda message: message.text.isdigit(), state=UserState.waiting_for_count)
async def handle_count(message: types.Message, state: FSMContext):
    """–û–±—Ä–æ–±–ª—è—î –≤–≤–µ–¥–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Å–µ—Ä—ñ–∞–ª—ñ–≤."""
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –≤–≤–µ–¥–µ–Ω–µ —á–∏—Å–ª–æ
    count = int(message.text)

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—è —á–∏—Å–ª–∞
    if count <= 0 or count > 45:
        await message.answer('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 1 –¥–æ 45.')
        return  # –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å, —â–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º—ñ–≥ –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤–µ —á–∏—Å–ª–æ

    # –ó–∞–¥–∞—î–º–æ API –∫–ª—é—á —ñ –±–∞–∑–æ–≤—É URL-–∞–¥—Ä–µ—Å—É
    api_key = os.getenv('API_KEY')  # –í–∞—à API –∫–ª—é—á
    base_url = 'https://api.themoviedb.org/3/tv/popular'

    # –°–ø–∏—Å–æ–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    total_shows = []

    # –ù—É–º–µ—Ä–∞—Ü—ñ—è —Å—Ç–æ—Ä—ñ–Ω–æ–∫ –¥–ª—è API
    page = 1
    try:
        async with httpx.AsyncClient() as client:
            while len(total_shows) < count:
                # –ó–∞–ø–∏—Ç –¥–æ API
                response = await client.get(f'{base_url}?api_key={api_key}&page={page}')
                response.raise_for_status()  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø–æ–º–∏–ª–∫–∏ –∑–∞–ø–∏—Ç—É
                shows = response.json().get('results', [])

                # –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Å–µ—Ä—ñ–∞–ª–∏ –∑–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–º
                filtered_shows = [show for show in shows if show.get('vote_average', 0) > 7]
                total_shows.extend(filtered_shows)

                if not shows:  # –Ø–∫—â–æ –±—ñ–ª—å—à–µ –Ω–µ–º–∞—î —Å–µ—Ä—ñ–∞–ª—ñ–≤
                    break

                page += 1

            # –í—ñ–¥–±–∏—Ä–∞—î–º–æ –ª–∏—à–µ –Ω–µ–æ–±—Ö—ñ–¥–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–µ—Ä—ñ–∞–ª—ñ–≤
            total_shows = total_shows[:count]

            # –Ø–∫—â–æ —Å–µ—Ä—ñ–∞–ª—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
            if not total_shows:
                await message.answer('–ù–∞ –∂–∞–ª—å, –ø–æ–ø—É–ª—è—Ä–Ω—ñ —Å–µ—Ä—ñ–∞–ª–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ.')
                return

            # –§–æ—Ä–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ —Å–µ—Ä—ñ–∞–ª—ñ–≤ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
            popular_shows = f"–û—Å—å {len(total_shows)} –ø–æ–ø—É–ª—è—Ä–Ω–∏—Ö —Å–µ—Ä—ñ–∞–ª—ñ–≤:\n\n"
            for i, show in enumerate(total_shows, start=1):
                name = show.get('name', '–ù–µ–≤—ñ–¥–æ–º–∞ –Ω–∞–∑–≤–∞')
                url = f"https://www.themoviedb.org/tv/{show.get('id')}"
                premiered = show.get('first_air_date', '–ù–µ–≤—ñ–¥–æ–º–∞ –¥–∞—Ç–∞ –ø—Ä–µ–º\'—î—Ä–∏')
                rating = show.get('vote_average', '–ù–µ–≤—ñ–¥–æ–º–∏–π —Ä–µ–π—Ç–∏–Ω–≥')

                popular_shows += (
                    f"{i}. üì∫ **{name}**\n"
                    f"üóìÔ∏è –î–∞—Ç–∞ –ø—Ä–µ–º'—î—Ä–∏: {premiered}\n"
                    f"‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥: {rating}\n"
                    f"üîó [–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ TMDb]({url})\n\n"
                )

            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            await message.answer(popular_shows, parse_mode='Markdown')

    except httpx.RequestError as e:
        await message.answer('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø–æ–ø—É–ª—è—Ä–Ω–∏—Ö —Å–µ—Ä—ñ–∞–ª—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.')
    except Exception as e:
        await message.answer(f'–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {str(e)}')

    # –ó–∞–≤–µ—Ä—à—É—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    await state.finish()



# –ü–æ—à—É–∫ –∑–∞ –Ω–∞–∑–≤–æ—é
@dp.message_handler(state=SearchState.waiting_for_title)
async def search_series(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–ª—è—î –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–∞–∑–≤–∏ —Å–µ—Ä—ñ–∞–ª—É."""
    title = message.text.strip()

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø–æ—Ä–æ–∂–Ω—ñ–π —Ç–µ–∫—Å—Ç
    if not title:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Å–µ—Ä—ñ–∞–ª—É.")
        return

    try:
        # –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –ø–æ—à—É–∫—É —Å–µ—Ä—ñ–∞–ª—É
        series_info = await get_series_by_title(title)

        if series_info:
            # –û—á–∏—â–∞—î–º–æ –æ–ø–∏—Å, –ø–µ—Ä–µ–∫–ª–∞–¥–∞—î–º–æ —Ç–∞ —Ñ–æ—Ä–º–∞—Ç—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
            description = series_info.get('summary', '–û–ø–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π')
            cleaned_description = clean_html(description)
            translated_description = await translate_text(cleaned_description, target_lang='UK')
            image = series_info.get('image', {}).get('medium',
                                                     'https://via.placeholder.com/200')  # –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
            rating = series_info.get('rating', {}).get('average', '–ù–µ–≤—ñ–¥–æ–º–æ')
            premiered = series_info.get('premiered', '–ù–µ–≤—ñ–¥–æ–º–æ')

            # –Ø–∫—â–æ –æ–ø–∏—Å –Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π (–±—ñ–ª—å—à–µ 850 —Å–∏–º–≤–æ–ª—ñ–≤), –æ–±—Ä—ñ–∑–∞—î–º–æ –π–æ–≥–æ
            if len(translated_description) > 850:
                truncated_description = translated_description[:850]  # –û–±—Ä—ñ–∑–∞—î–º–æ –¥–æ 850 —Å–∏–º–≤–æ–ª—ñ–≤
                # –®—É–∫–∞—î–º–æ –Ω–∞–π–±–ª–∏–∂—á–∏–π –∫—ñ–Ω–µ—Ü—å —Å–ª–æ–≤–∞
                if " " in truncated_description:
                    truncated_description = truncated_description.rsplit(" ", 1)[
                        0]  # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –æ—Å—Ç–∞–Ω–Ω—î —Å–ª–æ–≤–æ —Ç–∞ –æ–±—Ä—ñ–∑–∞—î–º–æ –π–æ–≥–æ
                truncated_description += "..."  # –î–æ–¥–∞—î–º–æ —Ç—Ä–∏ –∫—Ä–∞–ø–∫–∏
            else:
                # –Ø–∫—â–æ –æ–ø–∏—Å –Ω–µ –ø–µ—Ä–µ–≤–∏—â—É—î –ª—ñ–º—ñ—Ç—É, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –π–æ–≥–æ –ø–æ–≤–Ω—ñ—Å—Ç—é
                truncated_description = translated_description

            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Å–µ—Ä—ñ–∞–ª–æ–º
            await message.answer_photo(
                photo=image,
                caption=(
                    f"üì∫ <b>{series_info['name']}</b>\n"
                    f"‚≠ê <b>–†–µ–π—Ç–∏–Ω–≥:</b> {rating}\n"
                    f"üìú <b>–û–ø–∏—Å:</b> {truncated_description}\n"
                    f"üìÖ <b>–†—ñ–∫ –≤–∏–ø—É—Å–∫—É:</b> {premiered}"
                ),
                parse_mode="HTML",
            )

            # –ó–∞–≤–µ—Ä—à—É—î–º–æ —Å—Ç–∞–Ω –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –ø–æ—à—É–∫—É
            await state.finish()
        else:
            # –Ø–∫—â–æ —Å–µ—Ä—ñ–∞–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π
            await message.answer("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Å–µ—Ä—ñ–∞–ª –∑–∞ —Ü—ñ—î—é –Ω–∞–∑–≤–æ—é. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —ñ–Ω—à—É –Ω–∞–∑–≤—É:")

    except Exception as e:
        # –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
        await message.answer(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É: {e}")


@dp.message_handler(state=WatchState.waiting_for_series_name)
async def process_series_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–æ–±–ª—è—î –≤–≤–µ–¥–µ–Ω—É –Ω–∞–∑–≤—É —Å–µ—Ä—ñ–∞–ª—É —ñ –¥–æ–¥–∞—î —ó—ó –¥–æ —Å–ø–∏—Å–∫—É –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏—Ö."""

    series_name = message.text.strip()

    if not series_name:
        await message.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É –Ω–∞–∑–≤—É —Å–µ—Ä—ñ–∞–ª—É.")
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î —Å–µ—Ä—ñ–∞–ª
    if not await series_exists(series_name):
        await message.reply(f"–°–µ—Ä—ñ–∞–ª '{series_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—É –Ω–∞–∑–≤—É.")
        return

    user_id = message.from_user.id
    watched_series = await get_watched_series(user_id)

    if any(series_name.lower() == series.lower() for series in watched_series):
        await message.reply(f"–°–µ—Ä—ñ–∞–ª '{series_name}' –≤–∂–µ –≤ —Å–ø–∏—Å–∫—É –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–æ–≥–æ.")
        return

    # –î–æ–¥–∞—î–º–æ —Å–µ—Ä—ñ–∞–ª –¥–æ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–æ–≥–æ
    await add_watched_series(user_id, series_name)
    await message.reply(f"–°–µ—Ä—ñ–∞–ª '{series_name}' –¥–æ–¥–∞–Ω–æ –¥–æ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–æ–≥–æ.")

    # –ó–∞–≤–µ—Ä—à—É—î–º–æ —Å—Ç–∞–Ω
    await state.finish()

@dp.message_handler(state=RemoveState.waiting_for_series_name)
async def process_remove_series_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–æ–±–ª—è—î –≤–≤–µ–¥–µ–Ω—É –Ω–∞–∑–≤—É —Å–µ—Ä—ñ–∞–ª—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–æ–≥–æ."""
    series_name = message.text.strip()
    user_id = message.from_user.id

    if not series_name:
        await message.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É –Ω–∞–∑–≤—É —Å–µ—Ä—ñ–∞–ª—É.")
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Å–µ—Ä—ñ–∞–ª —î –≤ —Å–ø–∏—Å–∫—É –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏—Ö
    watched_series = await get_watched_series(user_id)

    if any(series_name.lower() == series.lower() for series in watched_series):
        # –í–∏–¥–∞–ª—è—î–º–æ —Å–µ—Ä—ñ–∞–ª –∑—ñ —Å–ø–∏—Å–∫—É
        await remove_watched_series(user_id, series_name)
        await message.reply(f"–°–µ—Ä—ñ–∞–ª '{series_name}' —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ –∑—ñ —Å–ø–∏—Å–∫—É –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–æ–≥–æ.")
        # –ó–∞–≤–µ—Ä—à—É—î–º–æ —Å—Ç–∞–Ω
        await state.finish()
    else:
        await message.reply(f"–°–µ—Ä—ñ–∞–ª '{series_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –≤–∞—à–æ–º—É —Å–ø–∏—Å–∫—É –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–æ–≥–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        # –ß–µ–∫–∞—î–º–æ –Ω–∞ –Ω–æ–≤—É –Ω–∞–∑–≤—É —Å–µ—Ä—ñ–∞–ª—É
        return


# –û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è —Å–µ—Ä—ñ–∞–ª—É
@dp.message_handler(state=Form.waiting_for_series_name)
async def process_series_name(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    series_name = message.text.strip()

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –≤–∫–∞–∑–∞–Ω–æ —ñ–º'—è —Å–µ—Ä—ñ–∞–ª—É
    if not series_name:
        await message.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –Ω–∞–∑–≤—É —Å–µ—Ä—ñ–∞–ª—É.")
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î —Å–µ—Ä—ñ–∞–ª —á–µ—Ä–µ–∑ API (–≤–∏ –º–æ–∂–µ—Ç–µ –∑–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ —Å–≤–æ—é –ø–µ—Ä–µ–≤—ñ—Ä–∫—É)
    if not await series_exists(series_name):
        await message.reply(f"–°–µ—Ä—ñ–∞–ª '{series_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—É –Ω–∞–∑–≤—É.")
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Å–µ—Ä—ñ–∞–ª –≤–∂–µ —î —É —Å–ø–∏—Å–∫—É –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏—Ö
    watched_series = await get_watched_series(user_id)
    if series_name.lower() in [series.lower() for series in watched_series]:
        await message.reply(f"–°–µ—Ä—ñ–∞–ª '{series_name}' –≤–∂–µ —î —É —Å–ø–∏—Å–∫—É –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏—Ö. –ô–æ–≥–æ –Ω–µ –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –¥–æ —Å–ø–∏—Å–∫—É –±–∞–∂–∞–Ω–∏—Ö.")
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Å–µ—Ä—ñ–∞–ª –≤–∂–µ —î –≤ —Å–ø–∏—Å–∫—É –±–∞–∂–∞–Ω–∏—Ö
    wishlist_series = await get_wishlist_series(user_id)
    if series_name.lower() in [series.lower() for series in wishlist_series]:
        await message.reply(f"–°–µ—Ä—ñ–∞–ª '{series_name}' –≤–∂–µ —î —É —Å–ø–∏—Å–∫—É –±–∞–∂–∞–Ω–∏—Ö.")
        return

    # –î–æ–¥–∞—î–º–æ —Å–µ—Ä—ñ–∞–ª –¥–æ —Å–ø–∏—Å–∫—É –±–∞–∂–∞–Ω–∏—Ö
    await add_wishlist_series(user_id, series_name)
    await message.reply(f"–°–µ—Ä—ñ–∞–ª '{series_name}' –¥–æ–¥–∞–Ω–æ –¥–æ —Å–ø–∏—Å–∫—É –±–∞–∂–∞–Ω–∏—Ö.")

    # –ó–∞–≤–µ—Ä—à—É—î–º–æ —Å—Ç–∞–Ω
    await state.finish()

# –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è —Å–µ—Ä—ñ–∞–ª—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
@dp.message_handler(state=WishlistRemove.waiting_for_series_name)
async def process_remove_wishlist_series(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    series_name = message.text.strip()

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –≤–∫–∞–∑–∞–Ω–æ —ñ–º'—è —Å–µ—Ä—ñ–∞–ª—É
    if not series_name:
        await message.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –Ω–∞–∑–≤—É —Å–µ—Ä—ñ–∞–ª—É.")
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —Å–µ—Ä—ñ–∞–ª —î —É —Å–ø–∏—Å–∫—É –±–∞–∂–∞–Ω–∏—Ö
    wishlist_series = await get_wishlist_series(user_id)
    if series_name.lower() not in [series.lower() for series in wishlist_series]:
        # –Ø–∫—â–æ —Å–µ—Ä—ñ–∞–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π —É —Å–ø–∏—Å–∫—É –±–∞–∂–∞–Ω–∏—Ö
        await message.reply(f"–°–µ—Ä—ñ–∞–ª '{series_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π —É –≤–∞—à–æ–º—É —Å–ø–∏—Å–∫—É –±–∞–∂–∞–Ω–∏—Ö. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—É –Ω–∞–∑–≤—É.")
        return  # –ó–∞–ª–∏—à–∞—î–º–æ —Å—Ç–∞–Ω –∞–∫—Ç–∏–≤–Ω–∏–º –¥–ª—è –Ω–æ–≤–æ—ó —Å–ø—Ä–æ–±–∏

    # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å–µ—Ä—ñ–∞–ª—É –∑—ñ —Å–ø–∏—Å–∫—É –±–∞–∂–∞–Ω–∏—Ö
    await remove_wishlist_series(user_id, series_name)
    await message.reply(f"–°–µ—Ä—ñ–∞–ª '{series_name}' –≤–∏–¥–∞–ª–µ–Ω–æ –∑—ñ —Å–ø–∏—Å–∫—É –±–∞–∂–∞–Ω–∏—Ö.")

    # –ó–∞–≤–µ—Ä—à—É—î–º–æ —Å—Ç–∞–Ω –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
    await state.finish()

# –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è —Å–µ—Ä—ñ–∞–ª—É –¥–ª—è –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è
@dp.message_handler(state=MoveToWatchedState.waiting_for_series_name)
async def process_move_to_watched_series(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    series_name = message.text.strip()

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –≤–∫–∞–∑–∞–Ω–æ —ñ–º'—è —Å–µ—Ä—ñ–∞–ª—É
    if not series_name:
        await message.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –Ω–∞–∑–≤—É —Å–µ—Ä—ñ–∞–ª—É.")
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —Å–µ—Ä—ñ–∞–ª —î —É —Å–ø–∏—Å–∫—É –±–∞–∂–∞–Ω–∏—Ö
    wishlist_series = await get_wishlist_series(user_id)
    if series_name.lower() not in [series.lower() for series in wishlist_series]:
        await message.reply(f"–°–µ—Ä—ñ–∞–ª '{series_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π —É –≤–∞—à–æ–º—É —Å–ø–∏—Å–∫—É –±–∞–∂–∞–Ω–∏—Ö.–°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—É –Ω–∞–∑–≤—É")
        return

    # –ü–µ—Ä–µ–º—ñ—â–∞—î–º–æ —Å–µ—Ä—ñ–∞–ª –¥–æ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏—Ö
    await move_to_watched(user_id, series_name)
    await message.reply(f"–°–µ—Ä—ñ–∞–ª '{series_name}' –ø–µ—Ä–µ–º—ñ—â–µ–Ω–æ –¥–æ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–æ–≥–æ.")

    # –ó–∞–≤–µ—Ä—à—É—î–º–æ —Å—Ç–∞–Ω –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è
    await state.finish()

# –û–±—Ä–æ–±–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ—á–∏—â–µ–Ω–Ω—è
@dp.message_handler(state=ClearWishlistState.waiting_for_confirmation)
async def process_clear_wishlist_confirmation(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    confirmation = message.text.strip().lower()

    if confirmation in ['—Ç–∞–∫', 'yes']:
        # –û—á–∏—â–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É
        await clear_wishlist_series(user_id)
        await message.reply("–í–∞—à —Å–ø–∏—Å–æ–∫ —Å–µ—Ä—ñ–∞–ª—ñ–≤, —è–∫—ñ –±–∞–∂–∞—î—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏, —É—Å–ø—ñ—à–Ω–æ –æ—á–∏—â–µ–Ω–æ.")
        await state.finish()
    elif confirmation in ['–Ω—ñ', 'no']:
        await message.reply("–û—á–∏—â–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
        await state.finish()
    else:
        await message.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ –ª–∏—à–µ '–¢–∞–∫' –∞–±–æ '–ù—ñ'.")


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)